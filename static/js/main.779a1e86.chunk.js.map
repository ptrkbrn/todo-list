{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","text","handleChange","bind","handleSubmit","evt","this","setState","target","value","preventDefault","addTodo","id","uuid","complete","className","onSubmit","type","name","placeholder","onChange","autoFocus","autoComplete","required","Component","Todo","todo","editing","handleDelete","startEdit","handleComplete","deleteTodo","editTodo","toggleTodo","stopPropagation","displayTodo","onClick","undefined","TodoList","savedTodos","todos","add","edit","toggleComplete","delete","newTodo","localStorage","setItem","JSON","stringify","todoId","newText","updatedTodos","map","console","log","filter","key","defaultProps","parse","getItem","App","Boolean","window","location","hostname","match","vh","innerHeight","document","documentElement","style","setProperty","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4lBA0CeA,E,YArCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,KAAM,IAEV,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBANL,E,0EAQNE,GACTC,KAAKC,SAAS,CAACN,KAAMI,EAAIG,OAAOC,U,mCAEvBJ,GACTA,EAAIK,kBAGJC,EAFoBL,KAAKP,MAAjBY,S,yVACK,IAAOL,KAAKN,MAAZ,CAAmBY,GAAIC,MAAQC,UAAU,KAEtDR,KAAKC,SAAS,CAACN,KAAM,O,+BAGrB,OACI,0BAAMc,UAAU,cAAcC,SAAUV,KAAKF,cACzC,2BACIa,KAAK,OACLC,KAAK,OACLN,GAAG,OACHO,YAAY,oBACZV,MAAOH,KAAKN,MAAMC,KAClBmB,SAAUd,KAAKJ,aACfmB,WAAS,EACTC,aAAa,MACbC,UAAQ,IACZ,4BAAQR,UAAU,sBAAlB,Y,GAhCUS,aC+DXC,G,kBA/DX,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT0B,KAAM,EAAK3B,MAAM2B,KACjBC,SAAS,GAEb,EAAKC,aAAe,EAAKA,aAAazB,KAAlB,gBACpB,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAK0B,UAAY,EAAKA,UAAU1B,KAAf,gBACjB,EAAK2B,eAAiB,EAAKA,eAAe3B,KAApB,gBAVP,E,4EAYH,IAAD,EACgBG,KAAKP,MAAxBa,EADG,EACHA,IACRmB,EAFW,EACCA,YACDnB,K,mCAEFP,GACTC,KAAKC,SAAL,eAAgBF,EAAIG,OAAOU,KAAOb,EAAIG,OAAOC,U,mCAEpCJ,GACTA,EAAIK,iBADU,MAEWJ,KAAKP,MAAtBiC,EAFM,EAENA,SAAUpB,EAFJ,EAEIA,GAFJ,EAGYN,KAAKN,MAAvB0B,EAHM,EAGNA,KAAMC,EAHA,EAGAA,QACdK,EAASpB,EAAIc,GACbpB,KAAKC,SAAS,CAACoB,SAAUA,M,gCAEnBtB,GAAM,IACJsB,EAAYrB,KAAKN,MAAjB2B,QACRrB,KAAKC,SAAS,CAACoB,SAAUA,M,qCAEdtB,GAAM,IAAD,EACWC,KAAKP,MAAxBkC,EADQ,EACRA,WAAYrB,EADJ,EACIA,GACpBP,EAAI6B,kBACJD,EAAWrB,K,+BAEL,IAAD,EACqBN,KAAKN,MAAvB0B,EADH,EACGA,KAAMC,EADT,EACSA,QACNb,EAAaR,KAAKP,MAAlBe,SACFqB,EAAeR,EAIX,0BAAMZ,UAAU,YAAYC,SAAUV,KAAKF,cACzC,2BACIgB,SAAUd,KAAKJ,aACfe,KAAK,OACLC,KAAK,OACLT,MAAOiB,IAEX,4BAAQX,UAAU,8BAVpB,uBAAGqB,QAAS9B,KAAKwB,eAAgBf,UAAWD,EAAW,gBAAauB,GAChEX,GAWd,OACI,wBAAIX,UAAU,QACToB,GACCR,GAAW,yBAAKZ,UAAU,gBACxB,4BAAQqB,QAAS9B,KAAKuB,UAAUd,UAAU,4BAC1C,4BAAQqB,QAAS9B,KAAKsB,aAAcb,UAAU,uC,GAzD/CS,c,mkBCEbc,E,YAIF,WAAYvC,GAAQ,IAAD,0BAEPwC,GADR,4CAAMxC,KACsBA,MAApBwC,WAFO,OAGf,EAAKvC,MAAQ,CACTwC,MAAOD,GAA0B,IAErC,EAAKE,IAAM,EAAKA,IAAItC,KAAT,gBACX,EAAKuC,KAAO,EAAKA,KAAKvC,KAAV,gBACZ,EAAKwC,eAAiB,EAAKA,eAAexC,KAApB,gBACtB,EAAKyC,OAAS,EAAKA,OAAOzC,KAAZ,gBATC,E,iEAWf0C,GAAU,IAAD,OACTvC,KAAKC,SACD,CAACiC,MAAM,GAAD,mBAAMlC,KAAKN,MAAMwC,OAAjB,CAAwBK,MAC9B,kBAAMC,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKjD,MAAMwC,a,2BAEjEU,EAAQC,GAAU,IAAD,OAEZC,EADY9C,KAAKN,MAAfwC,MACmBa,KAAI,SAAA3B,GAAI,OAAIA,EAAKd,KAAOsC,EAAZ,KAA0BxB,EAA1B,CAAgCzB,KAAMkD,IAAWzB,KACxFpB,KAAKC,SAAS,CAACiC,MAAOY,IAClB,kBAAMN,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKjD,MAAMwC,a,qCAGvDU,GAAS,IAAD,OACnBI,QAAQC,IAAIL,GADO,IAGbE,EADY9C,KAAKN,MAAfwC,MACmBa,KAAI,SAAA3B,GAAI,OAAIA,EAAKd,KAAOsC,EAAZ,KAA0BxB,EAA1B,CAAgCZ,UAAWY,EAAKZ,WAAYY,KACnGpB,KAAKC,SAAS,CAACiC,MAAOY,IAClB,kBAAMN,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKjD,MAAMwC,a,6BAG/DU,GAAS,IAAD,OACX5C,KAAKC,UACD,SAAAP,GAAK,MACD,CAACwC,MAAOxC,EAAMwC,MAAMgB,QAAO,SAAA9B,GAAI,OAAIA,EAAKd,KAAOsC,SAEnD,kBAAMJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,EAAKjD,MAAMwC,a,+BAG5D,IAAD,OACGA,EAAUlC,KAAKN,MAAfwC,MACR,OACI,yBAAKzB,UAAU,YACX,yBAAKA,UAAU,gBACX,4BAAQA,UAAU,mBACd,yCACA,uEACA,8BAEJ,wBAAIA,UAAU,kBACTyB,EAAMgB,QAAO,SAAA9B,GAAI,OAAIA,EAAKzB,QAAMoD,KAAI,SAAA3B,GAAI,OAAI,kBAAC,EAAD,CACGA,KAAMA,EAAKzB,KACXW,GAAIc,EAAKd,GACT6C,IAAK/B,EAAKd,GACVE,SAAUY,EAAKZ,SACfkB,SAAU,EAAKU,KACfT,WAAY,EAAKU,eACjBZ,WAAY,EAAKa,eAIvEJ,EAAM,IAAO,wBAAIzB,UAAU,mBAAd,kBACf,kBAAC,EAAD,CAAaJ,QAASL,KAAKmC,W,GAlEpBjB,aAAjBc,EACKoB,aAAe,CAClBnB,WAAYS,KAAKW,MAAMb,aAAac,QAAQ,WAsErCtB,Q,MCjEAuB,MARf,WACE,OACE,yBAAK9C,UAAU,OACb,kBAAC,EAAD,QCKc+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAIC,EAA0B,IAArBJ,OAAOK,YAChBC,SAASC,gBAAgBC,MAAMC,YAAY,OAA3C,UAAsDL,EAAtD,OAEAM,IAASC,OAAO,kBAAC,EAAD,MAASL,SAASM,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.779a1e86.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport uuid from 'uuid/v4';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            text: '',\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(evt) {\n        this.setState({text: evt.target.value})\n    }\n    handleSubmit(evt) {\n        evt.preventDefault();\n        const { addTodo } = this.props;\n        const newTodo = {...this.state, id: uuid(), complete: false}\n        addTodo(newTodo);\n        this.setState({text: ''});\n    }\n    render() {\n        return (\n            <form className=\"NewTodoForm\" onSubmit={this.handleSubmit}>\n                <input\n                    type=\"text\"\n                    name=\"todo\"\n                    id=\"todo\"\n                    placeholder=\"Add a new todo...\"\n                    value={this.state.text}\n                    onChange={this.handleChange}\n                    autoFocus\n                    autoComplete=\"off\"\n                    required />\n                <button className=\"NewTodoForm-button\">Add</button>\n            </form>\n        )\n    }\n}\n\nexport default NewTodoForm;\n","import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todo: this.props.todo,\n            editing: false,\n        }\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.startEdit = this.startEdit.bind(this);\n        this.handleComplete = this.handleComplete.bind(this);\n    }\n    handleDelete() {\n        const { id, deleteTodo } = this.props;\n        deleteTodo(id);\n    }\n    handleChange(evt) {\n        this.setState({[evt.target.name]: evt.target.value});\n    }\n    handleSubmit(evt) {\n        evt.preventDefault();\n        const { editTodo, id } = this.props;\n        const { todo, editing } = this.state;\n        editTodo(id, todo);\n        this.setState({editing: !editing})\n    }\n    startEdit(evt) {\n        const { editing } = this.state;\n        this.setState({editing: !editing})\n    }\n    handleComplete(evt) {\n        const { toggleTodo, id } = this.props;\n        evt.stopPropagation();\n        toggleTodo(id);\n    }\n    render() {\n        const { todo, editing } = this.state;\n        const { complete } = this.props;\n        const displayTodo = !editing\n                ? <p onClick={this.handleComplete} className={complete ? 'complete' : undefined}>\n                     {todo}\n                </p>\n                : <form className=\"Todo-form\" onSubmit={this.handleSubmit}>\n                    <input\n                        onChange={this.handleChange}\n                        type=\"text\"\n                        name=\"todo\"\n                        value={todo}\n                    />\n                    <button className=\"Todo-button fas fa-check\" />\n                </form>\n        return (\n            <li className=\"Todo\">\n                {displayTodo}\n                {!editing && <div className=\"Todo-buttons\">\n                    <button onClick={this.startEdit}className=\"Todo-button fas fa-edit\" />\n                    <button onClick={this.handleDelete} className=\"Todo-button fas fa-trash-alt\" />\n                </div>}\n            </li>\n        )\n    }\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport NewTodoForm from './NewTodoForm';\nimport Todo from './Todo';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    static defaultProps = {\n        savedTodos: JSON.parse(localStorage.getItem(\"todos\")),\n    }\n    constructor(props) {\n        super(props);\n        const { savedTodos } = this.props;\n        this.state = {\n            todos: savedTodos ? savedTodos : [],\n        }\n        this.add = this.add.bind(this);\n        this.edit = this.edit.bind(this);\n        this.toggleComplete = this.toggleComplete.bind(this);\n        this.delete = this.delete.bind(this);\n    }\n    add(newTodo) {\n        this.setState(\n            {todos: [...this.state.todos, newTodo]},\n            () => localStorage.setItem(\"todos\", JSON.stringify(this.state.todos)));\n    }\n    edit(todoId, newText) {\n        const { todos } = this.state;\n        const updatedTodos = todos.map(todo => todo.id === todoId ? { ...todo, text: newText} : todo)\n        this.setState({todos: updatedTodos},\n            () => localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\n        )\n    }\n    toggleComplete(todoId) {\n        console.log(todoId)\n        const { todos } = this.state;\n        const updatedTodos = todos.map(todo => todo.id === todoId ? { ...todo, complete: !todo.complete} : todo)\n        this.setState({todos: updatedTodos},\n            () => localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\n        )\n    }\n    delete(todoId) {\n        this.setState(\n            state => (\n                {todos: state.todos.filter(todo => todo.id !== todoId)}\n            ),\n            () => localStorage.setItem(\"todos\", JSON.stringify(this.state.todos))\n        )\n    }\n    render() {\n        const { todos } = this.state;\n        return (\n            <div className=\"TodoList\">\n                <div className=\"TodoList-top\">\n                    <header className=\"TodoList-header\">\n                        <h1>Todo List</h1>\n                        <p>Keep track of yr shit. Created w/ React.</p>\n                        <hr />\n                    </header>\n                    <ul className=\"TodoList-todos\">\n                        {todos.filter(todo => todo.text).map(todo => <Todo\n                                                                        todo={todo.text}\n                                                                        id={todo.id}\n                                                                        key={todo.id}\n                                                                        complete={todo.complete}\n                                                                        editTodo={this.edit}\n                                                                        toggleTodo={this.toggleComplete}\n                                                                        deleteTodo={this.delete}\n                                                                    />)}\n                    </ul>\n                </div>\n                {!todos[0]  && <h1 className=\"TodoList-filler\">Todos go here.</h1>}\n                <NewTodoForm addTodo={this.add} />\n            </div>\n        )\n    }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// fixes 100vh height in mobile browsers.\nlet vh = window.innerHeight * 0.01;\ndocument.documentElement.style.setProperty('--vh', `${vh}px`);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}